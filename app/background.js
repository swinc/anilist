/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/

// set rules for pages to act upon
const targetPagesRule = {
    conditions: [
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'crunchyroll.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'netflix.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'hulu.com' }
        })
    ],
    actions: [new chrome.declarativeContent.ShowPageAction()]
};
chrome.runtime.onInstalled.addListener(function () {
    chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {
        chrome.declarativeContent.onPageChanged.addRules([targetPagesRule]);
    });
});
// entire login function must be inside this file because service workers cannot import
// modules until Chrome 93 (allegedly)
// see https://stackoverflow.com/questions/66114920/service-worker-registration-failed-chrome-extension
chrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {
    if (message == 'do-login') {
        const loginLink = 'https://anilist.co/api/v2/oauth/authorize?client_id=4552&response_type=token';
        chrome.identity.launchWebAuthFlow({ url: loginLink, interactive: true }, function (responseUrl) {
            if (typeof responseUrl !== "string") {
                console.error('Login error: authentication response url was invalid.');
                sendResponse({ accessToken: null });
                return;
            }
            // https://regex101.com/r/jDz0sC/1
            const accessTokenRegEx = /access_token=(.+?)(&|$)/;
            const tokenTypeRegEx = /token_type=(.+?)(&|$)/;
            const expiresInRegEx = /expires_in=(.+?)(&|$)/;
            let matches = responseUrl.match(accessTokenRegEx); // first captured group
            const accessToken = matches ? matches[1] : null;
            matches = responseUrl.match(tokenTypeRegEx);
            const tokenType = matches ? matches[1] : null;
            matches = responseUrl.match(expiresInRegEx);
            const expiresIn = matches ? matches[1] : null;
            if (typeof accessToken !== 'string') {
                console.error('Login error: accessToken could not be retrieved.');
                sendResponse({ accessToken: null });
                return;
            }
            chrome.storage.sync.set({
                accessToken: accessToken,
                tokenType: tokenType,
                expiresIn: expiresIn
            });
            const options = {
                type: 'basic',
                title: 'Anilist',
                message: 'You have successfully logged into Anilist.',
                iconUrl: './images/icon128.png'
            };
            chrome.notifications.create('', options);
            sendResponse({ accessToken: accessToken });
        });
        return true; // needed for async message response; see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrQ0FBa0M7QUFDbEMsTUFBTSxlQUFlLEdBQUc7SUFDdEIsVUFBVSxFQUFFO1FBQ1YsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7WUFDN0MsT0FBTyxFQUFFLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFO1NBQzdDLENBQUM7UUFDRixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM3QyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFO1NBQ3pDLENBQUM7UUFDRixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM3QyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFO1NBQ3RDLENBQUM7S0FDSDtJQUNELE9BQU8sRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxDQUFDO0NBQzFELENBQUE7QUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7SUFDckMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFO1FBQzdELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBO0FBRUYsdUZBQXVGO0FBQ3ZGLHNDQUFzQztBQUN0Qyx1R0FBdUc7QUFDdkcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRTtJQUN0RSxJQUFJLE9BQU8sSUFBSSxVQUFVLEVBQUU7UUFDekIsTUFBTSxTQUFTLEdBQUcsOEVBQThFLENBQUE7UUFDaEcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FDL0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFDckMsVUFBVSxXQUFXO1lBQ25CLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFO2dCQUNuQyxPQUFPLENBQUMsS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUE7Z0JBQ3RFLFlBQVksQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO2dCQUNuQyxPQUFNO2FBQ1A7WUFDRCxrQ0FBa0M7WUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQTtZQUNsRCxNQUFNLGNBQWMsR0FBRyx1QkFBdUIsQ0FBQTtZQUM5QyxNQUFNLGNBQWMsR0FBRyx1QkFBdUIsQ0FBQTtZQUM5QyxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUEsQ0FBQyx1QkFBdUI7WUFDekUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtZQUUvQyxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUMzQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1lBRTdDLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1lBQzNDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7WUFFN0MsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7Z0JBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQTtnQkFDakUsWUFBWSxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7Z0JBQ25DLE9BQU07YUFDUDtZQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDdEIsV0FBVyxFQUFFLFdBQVc7Z0JBQ3hCLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixTQUFTLEVBQUUsU0FBUzthQUNyQixDQUFDLENBQUE7WUFDRixNQUFNLE9BQU8sR0FBRztnQkFDWixJQUFJLEVBQUUsT0FBTztnQkFDYixLQUFLLEVBQUUsU0FBUztnQkFDaEIsT0FBTyxFQUFFLDRDQUE0QztnQkFDckQsT0FBTyxFQUFDLHNCQUFzQjthQUNqQyxDQUFDO1lBQ0YsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3pDLFlBQVksQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQzVDLENBQUMsQ0FDRixDQUFBO1FBQ0QsT0FBTyxJQUFJLENBQUEsQ0FBQyxzSUFBc0k7S0FDbko7QUFDSCxDQUFDLENBQUMsQ0FBQSJ9
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,