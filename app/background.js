/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
// set rules for pages to act upon
const targetPagesRule = {
    conditions: [
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'crunchyroll.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'netflix.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'hulu.com' }
        })
    ],
    actions: [new chrome.declarativeContent.ShowPageAction()]
};
chrome.runtime.onInstalled.addListener(function () {
    chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {
        chrome.declarativeContent.onPageChanged.addRules([targetPagesRule]);
    });
});
// entire login function must be inside this file because service workers cannot import
// modules until Chrome 93 (allegedly)
// see https://stackoverflow.com/questions/66114920/service-worker-registration-failed-chrome-extension
chrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {
    if (message == 'do-login') {
        const loginLink = 'https://anilist.co/api/v2/oauth/authorize?client_id=4552&response_type=token';
        chrome.identity.launchWebAuthFlow({ url: loginLink, interactive: true }, function (responseUrl) {
            // https://regex101.com/r/jDz0sC/1
            const accessTokenRegEx = /access_token=(.+?)(&|$)/;
            const tokenTypeRegEx = /token_type=(.+?)(&|$)/;
            const expiresInRegEx = /expires_in=(.+?)(&|$)/;
            const accessToken = responseUrl.match(accessTokenRegEx)[1]; // first captured group
            const tokenType = responseUrl.match(tokenTypeRegEx)[1];
            const expiresIn = responseUrl.match(expiresInRegEx)[1];
            if (!accessToken) {
                console.log("Login error.");
            }
            else {
                chrome.storage.sync.set({
                    accessToken: accessToken,
                    tokenType: tokenType,
                    expiresIn: expiresIn
                });
                const options = {
                    type: 'basic',
                    title: 'Anilist',
                    message: 'You have successfully logged into Anilist.',
                    iconUrl: './images/icon128.png'
                };
                chrome.notifications.create(null, options);
                sendResponse({ accessToken: accessToken });
            }
        });
        return true; // needed for async message response; see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxNQUFNLGVBQWUsR0FBRztJQUN0QixVQUFVLEVBQUU7UUFDVixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM3QyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUU7U0FDN0MsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQzdDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUU7U0FDekMsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQzdDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUU7U0FDdEMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLENBQUM7Q0FDMUQsQ0FBQTtBQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUNyQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7UUFDN0QsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUE7QUFFRix1RkFBdUY7QUFDdkYsc0NBQXNDO0FBQ3RDLHVHQUF1RztBQUN2RyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFO0lBQ3RFLElBQUksT0FBTyxJQUFJLFVBQVUsRUFBRTtRQUN6QixNQUFNLFNBQVMsR0FBRyw4RUFBOEUsQ0FBQTtRQUNoRyxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUMvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxFQUNyQyxVQUFVLFdBQVc7WUFDbkIsa0NBQWtDO1lBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcseUJBQXlCLENBQUE7WUFDbEQsTUFBTSxjQUFjLEdBQUcsdUJBQXVCLENBQUE7WUFDOUMsTUFBTSxjQUFjLEdBQUcsdUJBQXVCLENBQUE7WUFFOUMsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsdUJBQXVCO1lBQ2xGLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdEQsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUV0RCxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO2FBQzVCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztvQkFDdEIsV0FBVyxFQUFFLFdBQVc7b0JBQ3hCLFNBQVMsRUFBRSxTQUFTO29CQUNwQixTQUFTLEVBQUUsU0FBUztpQkFDckIsQ0FBQyxDQUFBO2dCQUNGLE1BQU0sT0FBTyxHQUFHO29CQUNaLElBQUksRUFBRSxPQUFPO29CQUNiLEtBQUssRUFBRSxTQUFTO29CQUNoQixPQUFPLEVBQUUsNENBQTRDO29CQUNyRCxPQUFPLEVBQUMsc0JBQXNCO2lCQUNqQyxDQUFDO2dCQUNGLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDM0MsWUFBWSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7YUFDM0M7UUFDSCxDQUFDLENBQ0YsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFBLENBQUMsc0lBQXNJO0tBQ25KO0FBQ0gsQ0FBQyxDQUFDLENBQUEifQ==
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmlsaXN0LXVwZGF0ZS8uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsU0FBUztBQUNUO0FBQ0Esc0JBQXNCO0FBQ3RCLFNBQVM7QUFDVDtBQUNBLHNCQUFzQjtBQUN0QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsb0NBQW9DO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDJCQUEyQjtBQUN6RDtBQUNBLFNBQVM7QUFDVCxvQkFBb0Isc0NBQXNDO0FBQzFEO0FBQ0EsQ0FBQztBQUNELDJDQUEyQyxtL0UiLCJmaWxlIjoiLi9hcHAvYmFja2dyb3VuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNldCBydWxlcyBmb3IgcGFnZXMgdG8gYWN0IHVwb25cbmNvbnN0IHRhcmdldFBhZ2VzUnVsZSA9IHtcbiAgICBjb25kaXRpb25zOiBbXG4gICAgICAgIG5ldyBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50LlBhZ2VTdGF0ZU1hdGNoZXIoe1xuICAgICAgICAgICAgcGFnZVVybDogeyBob3N0Q29udGFpbnM6ICdjcnVuY2h5cm9sbC5jb20nIH1cbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50LlBhZ2VTdGF0ZU1hdGNoZXIoe1xuICAgICAgICAgICAgcGFnZVVybDogeyBob3N0Q29udGFpbnM6ICduZXRmbGl4LmNvbScgfVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IGNocm9tZS5kZWNsYXJhdGl2ZUNvbnRlbnQuUGFnZVN0YXRlTWF0Y2hlcih7XG4gICAgICAgICAgICBwYWdlVXJsOiB7IGhvc3RDb250YWluczogJ2h1bHUuY29tJyB9XG4gICAgICAgIH0pXG4gICAgXSxcbiAgICBhY3Rpb25zOiBbbmV3IGNocm9tZS5kZWNsYXJhdGl2ZUNvbnRlbnQuU2hvd1BhZ2VBY3Rpb24oKV1cbn07XG5jaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XG4gICAgY2hyb21lLmRlY2xhcmF0aXZlQ29udGVudC5vblBhZ2VDaGFuZ2VkLnJlbW92ZVJ1bGVzKHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50Lm9uUGFnZUNoYW5nZWQuYWRkUnVsZXMoW3RhcmdldFBhZ2VzUnVsZV0pO1xuICAgIH0pO1xufSk7XG4vLyBlbnRpcmUgbG9naW4gZnVuY3Rpb24gbXVzdCBiZSBpbnNpZGUgdGhpcyBmaWxlIGJlY2F1c2Ugc2VydmljZSB3b3JrZXJzIGNhbm5vdCBpbXBvcnRcbi8vIG1vZHVsZXMgdW50aWwgQ2hyb21lIDkzIChhbGxlZ2VkbHkpXG4vLyBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjYxMTQ5MjAvc2VydmljZS13b3JrZXItcmVnaXN0cmF0aW9uLWZhaWxlZC1jaHJvbWUtZXh0ZW5zaW9uXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIF9zZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgIGlmIChtZXNzYWdlID09ICdkby1sb2dpbicpIHtcbiAgICAgICAgY29uc3QgbG9naW5MaW5rID0gJ2h0dHBzOi8vYW5pbGlzdC5jby9hcGkvdjIvb2F1dGgvYXV0aG9yaXplP2NsaWVudF9pZD00NTUyJnJlc3BvbnNlX3R5cGU9dG9rZW4nO1xuICAgICAgICBjaHJvbWUuaWRlbnRpdHkubGF1bmNoV2ViQXV0aEZsb3coeyB1cmw6IGxvZ2luTGluaywgaW50ZXJhY3RpdmU6IHRydWUgfSwgZnVuY3Rpb24gKHJlc3BvbnNlVXJsKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2pEejBzQy8xXG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlblJlZ0V4ID0gL2FjY2Vzc190b2tlbj0oLis/KSgmfCQpLztcbiAgICAgICAgICAgIGNvbnN0IHRva2VuVHlwZVJlZ0V4ID0gL3Rva2VuX3R5cGU9KC4rPykoJnwkKS87XG4gICAgICAgICAgICBjb25zdCBleHBpcmVzSW5SZWdFeCA9IC9leHBpcmVzX2luPSguKz8pKCZ8JCkvO1xuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSByZXNwb25zZVVybC5tYXRjaChhY2Nlc3NUb2tlblJlZ0V4KVsxXTsgLy8gZmlyc3QgY2FwdHVyZWQgZ3JvdXBcbiAgICAgICAgICAgIGNvbnN0IHRva2VuVHlwZSA9IHJlc3BvbnNlVXJsLm1hdGNoKHRva2VuVHlwZVJlZ0V4KVsxXTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGlyZXNJbiA9IHJlc3BvbnNlVXJsLm1hdGNoKGV4cGlyZXNJblJlZ0V4KVsxXTtcbiAgICAgICAgICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvZ2luIGVycm9yLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblR5cGU6IHRva2VuVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlc0luOiBleHBpcmVzSW5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmFzaWMnLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0FuaWxpc3QnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnWW91IGhhdmUgc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbnRvIEFuaWxpc3QuJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJy4vaW1hZ2VzL2ljb24xMjgucG5nJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKG51bGwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBuZWVkZWQgZm9yIGFzeW5jIG1lc3NhZ2UgcmVzcG9uc2U7IHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL01vemlsbGEvQWRkLW9ucy9XZWJFeHRlbnNpb25zL0FQSS9ydW50aW1lL29uTWVzc2FnZVxuICAgIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWW1GamEyZHliM1Z1WkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OWlZV05yWjNKdmRXNWtMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHdERRVUZyUXp0QlFVTnNReXhOUVVGTkxHVkJRV1VzUjBGQlJ6dEpRVU4wUWl4VlFVRlZMRVZCUVVVN1VVRkRWaXhKUVVGSkxFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0WlFVTTNReXhQUVVGUExFVkJRVVVzUlVGQlJTeFpRVUZaTEVWQlFVVXNhVUpCUVdsQ0xFVkJRVVU3VTBGRE4wTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFsQlF6ZERMRTlCUVU4c1JVRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeGhRVUZoTEVWQlFVVTdVMEZEZWtNc1EwRkJRenRSUVVOR0xFbEJRVWtzVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRPMWxCUXpkRExFOUJRVThzUlVGQlJTeEZRVUZGTEZsQlFWa3NSVUZCUlN4VlFVRlZMRVZCUVVVN1UwRkRkRU1zUTBGQlF6dExRVU5JTzBsQlEwUXNUMEZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03UTBGRE1VUXNRMEZCUVR0QlFVTkVMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEZkQlFWY3NRMEZCUXp0SlFVTnlReXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1lVRkJZU3hEUVVGRExGZEJRVmNzUTBGQlF5eFRRVUZUTEVWQlFVVTdVVUZETjBRc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTNKRkxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVFN1FVRkZSaXgxUmtGQmRVWTdRVUZEZGtZc2MwTkJRWE5ETzBGQlEzUkRMSFZIUVVGMVJ6dEJRVU4yUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxGbEJRVmtzUlVGQlJTeEZRVUZGTzBsQlEzUkZMRWxCUVVrc1QwRkJUeXhKUVVGSkxGVkJRVlVzUlVGQlJUdFJRVU42UWl4TlFVRk5MRk5CUVZNc1IwRkJSeXc0UlVGQk9FVXNRMEZCUVR0UlFVTm9SeXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEdsQ1FVRnBRaXhEUVVNdlFpeEZRVUZGTEVkQlFVY3NSVUZCUlN4VFFVRlRMRVZCUVVVc1YwRkJWeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEZRVU55UXl4VlFVRlZMRmRCUVZjN1dVRkRia0lzYTBOQlFXdERPMWxCUTJ4RExFMUJRVTBzWjBKQlFXZENMRWRCUVVjc2VVSkJRWGxDTEVOQlFVRTdXVUZEYkVRc1RVRkJUU3hqUVVGakxFZEJRVWNzZFVKQlFYVkNMRU5CUVVFN1dVRkRPVU1zVFVGQlRTeGpRVUZqTEVkQlFVY3NkVUpCUVhWQ0xFTkJRVUU3V1VGRk9VTXNUVUZCVFN4WFFVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTEVOQlFVTXNkVUpCUVhWQ08xbEJRMnhHTEUxQlFVMHNVMEZCVXl4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1dVRkRkRVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0WlFVVjBSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzJkQ1FVTm9RaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkJPMkZCUXpWQ08ybENRVUZOTzJkQ1FVTk1MRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0dlFrRkRkRUlzVjBGQlZ5eEZRVUZGTEZkQlFWYzdiMEpCUTNoQ0xGTkJRVk1zUlVGQlJTeFRRVUZUTzI5Q1FVTndRaXhUUVVGVExFVkJRVVVzVTBGQlV6dHBRa0ZEY2tJc1EwRkJReXhEUVVGQk8yZENRVU5HTEUxQlFVMHNUMEZCVHl4SFFVRkhPMjlDUVVOYUxFbEJRVWtzUlVGQlJTeFBRVUZQTzI5Q1FVTmlMRXRCUVVzc1JVRkJSU3hUUVVGVE8yOUNRVU5vUWl4UFFVRlBMRVZCUVVVc05FTkJRVFJETzI5Q1FVTnlSQ3hQUVVGUExFVkJRVU1zYzBKQlFYTkNPMmxDUVVOcVF5eERRVUZETzJkQ1FVTkdMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRuUWtGRE0wTXNXVUZCV1N4RFFVRkRMRVZCUVVVc1YwRkJWeXhGUVVGRkxGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVRTdZVUZETTBNN1VVRkRTQ3hEUVVGRExFTkJRMFlzUTBGQlFUdFJRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkJMRU5CUVVNc2MwbEJRWE5KTzB0QlEyNUtPMEZCUTBnc1EwRkJReXhEUVVGRExFTkJRVUVpZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=