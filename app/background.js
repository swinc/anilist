/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
// set rules for pages to act upon
const targetPagesRule = {
    conditions: [
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'crunchyroll.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'netflix.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'hulu.com' }
        })
    ],
    actions: [new chrome.declarativeContent.ShowPageAction()]
};
chrome.runtime.onInstalled.addListener(function () {
    chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {
        chrome.declarativeContent.onPageChanged.addRules([targetPagesRule]);
    });
});
// entire login function must be inside this file because service workers cannot import
// modules until Chrome 93 (allegedly)
// see https://stackoverflow.com/questions/66114920/service-worker-registration-failed-chrome-extension
chrome.runtime.onMessage.addListener((message) => {
    if (message == 'do-login') {
        const loginLink = 'https://anilist.co/api/v2/oauth/authorize?client_id=4552&response_type=token';
        chrome.identity.launchWebAuthFlow({ url: loginLink, interactive: true }, function (responseUrl) {
            // https://regex101.com/r/jDz0sC/1
            const accessTokenRegEx = /access_token=(.+?)(&|$)/;
            const tokenTypeRegEx = /token_type=(.+?)(&|$)/;
            const expiresInRegEx = /expires_in=(.+?)(&|$)/;
            const accessToken = responseUrl.match(accessTokenRegEx)[1]; // first captured group
            const tokenType = responseUrl.match(tokenTypeRegEx)[1];
            const expiresIn = responseUrl.match(expiresInRegEx)[1];
            if (!accessToken) {
                console.log("Login error.");
            }
            else {
                chrome.storage.sync.set({
                    accessToken: accessToken,
                    tokenType: tokenType,
                    expiresIn: expiresIn
                });
                const options = {
                    type: 'basic',
                    title: 'Anilist',
                    message: 'You have successfully logged into Anilist.',
                    iconUrl: './images/icon128.png'
                };
                chrome.notifications.create(null, options);
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxNQUFNLGVBQWUsR0FBRztJQUN0QixVQUFVLEVBQUU7UUFDVixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM3QyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUU7U0FDN0MsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQzdDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUU7U0FDekMsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQzdDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUU7U0FDdEMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLENBQUM7Q0FDMUQsQ0FBQTtBQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUNyQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7UUFDN0QsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUE7QUFFRix1RkFBdUY7QUFDdkYsc0NBQXNDO0FBQ3RDLHVHQUF1RztBQUN2RyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUMvQyxJQUFJLE9BQU8sSUFBSSxVQUFVLEVBQUU7UUFDekIsTUFBTSxTQUFTLEdBQUcsOEVBQThFLENBQUE7UUFDaEcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FDL0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFDckMsVUFBVSxXQUFXO1lBQ25CLGtDQUFrQztZQUNsQyxNQUFNLGdCQUFnQixHQUFHLHlCQUF5QixDQUFBO1lBQ2xELE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFBO1lBQzlDLE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFBO1lBRTlDLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLHVCQUF1QjtZQUNsRixNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3RELE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFFdEQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTthQUM1QjtpQkFBTTtnQkFDTCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7b0JBQ3RCLFdBQVcsRUFBRSxXQUFXO29CQUN4QixTQUFTLEVBQUUsU0FBUztvQkFDcEIsU0FBUyxFQUFFLFNBQVM7aUJBQ3JCLENBQUMsQ0FBQTtnQkFDRixNQUFNLE9BQU8sR0FBRztvQkFDWixJQUFJLEVBQUUsT0FBTztvQkFDYixLQUFLLEVBQUUsU0FBUztvQkFDaEIsT0FBTyxFQUFFLDRDQUE0QztvQkFDckQsT0FBTyxFQUFDLHNCQUFzQjtpQkFDakMsQ0FBQztnQkFDRixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDNUM7UUFDSCxDQUFDLENBQ0YsQ0FBQTtLQUNGO0FBQ0gsQ0FBQyxDQUFDLENBQUEifQ==
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmlsaXN0LXVwZGF0ZS8uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsU0FBUztBQUNUO0FBQ0Esc0JBQXNCO0FBQ3RCLFNBQVM7QUFDVDtBQUNBLHNCQUFzQjtBQUN0QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsb0NBQW9DO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxDQUFDO0FBQ0QsMkNBQTJDLHUyRSIsImZpbGUiOiIuL2FwcC9iYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2V0IHJ1bGVzIGZvciBwYWdlcyB0byBhY3QgdXBvblxuY29uc3QgdGFyZ2V0UGFnZXNSdWxlID0ge1xuICAgIGNvbmRpdGlvbnM6IFtcbiAgICAgICAgbmV3IGNocm9tZS5kZWNsYXJhdGl2ZUNvbnRlbnQuUGFnZVN0YXRlTWF0Y2hlcih7XG4gICAgICAgICAgICBwYWdlVXJsOiB7IGhvc3RDb250YWluczogJ2NydW5jaHlyb2xsLmNvbScgfVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IGNocm9tZS5kZWNsYXJhdGl2ZUNvbnRlbnQuUGFnZVN0YXRlTWF0Y2hlcih7XG4gICAgICAgICAgICBwYWdlVXJsOiB7IGhvc3RDb250YWluczogJ25ldGZsaXguY29tJyB9XG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgY2hyb21lLmRlY2xhcmF0aXZlQ29udGVudC5QYWdlU3RhdGVNYXRjaGVyKHtcbiAgICAgICAgICAgIHBhZ2VVcmw6IHsgaG9zdENvbnRhaW5zOiAnaHVsdS5jb20nIH1cbiAgICAgICAgfSlcbiAgICBdLFxuICAgIGFjdGlvbnM6IFtuZXcgY2hyb21lLmRlY2xhcmF0aXZlQ29udGVudC5TaG93UGFnZUFjdGlvbigpXVxufTtcbmNocm9tZS5ydW50aW1lLm9uSW5zdGFsbGVkLmFkZExpc3RlbmVyKGZ1bmN0aW9uICgpIHtcbiAgICBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50Lm9uUGFnZUNoYW5nZWQucmVtb3ZlUnVsZXModW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNocm9tZS5kZWNsYXJhdGl2ZUNvbnRlbnQub25QYWdlQ2hhbmdlZC5hZGRSdWxlcyhbdGFyZ2V0UGFnZXNSdWxlXSk7XG4gICAgfSk7XG59KTtcbi8vIGVudGlyZSBsb2dpbiBmdW5jdGlvbiBtdXN0IGJlIGluc2lkZSB0aGlzIGZpbGUgYmVjYXVzZSBzZXJ2aWNlIHdvcmtlcnMgY2Fubm90IGltcG9ydFxuLy8gbW9kdWxlcyB1bnRpbCBDaHJvbWUgOTMgKGFsbGVnZWRseSlcbi8vIHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NjExNDkyMC9zZXJ2aWNlLXdvcmtlci1yZWdpc3RyYXRpb24tZmFpbGVkLWNocm9tZS1leHRlbnNpb25cbmNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobWVzc2FnZSkgPT4ge1xuICAgIGlmIChtZXNzYWdlID09ICdkby1sb2dpbicpIHtcbiAgICAgICAgY29uc3QgbG9naW5MaW5rID0gJ2h0dHBzOi8vYW5pbGlzdC5jby9hcGkvdjIvb2F1dGgvYXV0aG9yaXplP2NsaWVudF9pZD00NTUyJnJlc3BvbnNlX3R5cGU9dG9rZW4nO1xuICAgICAgICBjaHJvbWUuaWRlbnRpdHkubGF1bmNoV2ViQXV0aEZsb3coeyB1cmw6IGxvZ2luTGluaywgaW50ZXJhY3RpdmU6IHRydWUgfSwgZnVuY3Rpb24gKHJlc3BvbnNlVXJsKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2pEejBzQy8xXG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlblJlZ0V4ID0gL2FjY2Vzc190b2tlbj0oLis/KSgmfCQpLztcbiAgICAgICAgICAgIGNvbnN0IHRva2VuVHlwZVJlZ0V4ID0gL3Rva2VuX3R5cGU9KC4rPykoJnwkKS87XG4gICAgICAgICAgICBjb25zdCBleHBpcmVzSW5SZWdFeCA9IC9leHBpcmVzX2luPSguKz8pKCZ8JCkvO1xuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSByZXNwb25zZVVybC5tYXRjaChhY2Nlc3NUb2tlblJlZ0V4KVsxXTsgLy8gZmlyc3QgY2FwdHVyZWQgZ3JvdXBcbiAgICAgICAgICAgIGNvbnN0IHRva2VuVHlwZSA9IHJlc3BvbnNlVXJsLm1hdGNoKHRva2VuVHlwZVJlZ0V4KVsxXTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGlyZXNJbiA9IHJlc3BvbnNlVXJsLm1hdGNoKGV4cGlyZXNJblJlZ0V4KVsxXTtcbiAgICAgICAgICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvZ2luIGVycm9yLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblR5cGU6IHRva2VuVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlc0luOiBleHBpcmVzSW5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmFzaWMnLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0FuaWxpc3QnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnWW91IGhhdmUgc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbnRvIEFuaWxpc3QuJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJy4vaW1hZ2VzL2ljb24xMjgucG5nJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKG51bGwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVltRmphMmR5YjNWdVpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlpWVdOclozSnZkVzVrTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR3REUVVGclF6dEJRVU5zUXl4TlFVRk5MR1ZCUVdVc1IwRkJSenRKUVVOMFFpeFZRVUZWTEVWQlFVVTdVVUZEVml4SlFVRkpMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4blFrRkJaMElzUTBGQlF6dFpRVU0zUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzYVVKQlFXbENMRVZCUVVVN1UwRkROME1zUTBGQlF6dFJRVU5HTEVsQlFVa3NUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8xbEJRemRETEU5QlFVOHNSVUZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hoUVVGaExFVkJRVVU3VTBGRGVrTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFsQlF6ZERMRTlCUVU4c1JVRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeFZRVUZWTEVWQlFVVTdVMEZEZEVNc1EwRkJRenRMUVVOSU8wbEJRMFFzVDBGQlR5eEZRVUZGTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1EwRkRNVVFzUTBGQlFUdEJRVU5FTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF6dEpRVU55UXl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFVkJRVVU3VVVGRE4wUXNUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzSkZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZGUml4MVJrRkJkVVk3UVVGRGRrWXNjME5CUVhORE8wRkJRM1JETEhWSFFVRjFSenRCUVVOMlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlR0SlFVTXZReXhKUVVGSkxFOUJRVThzU1VGQlNTeFZRVUZWTEVWQlFVVTdVVUZEZWtJc1RVRkJUU3hUUVVGVExFZEJRVWNzT0VWQlFUaEZMRU5CUVVFN1VVRkRhRWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4cFFrRkJhVUlzUTBGREwwSXNSVUZCUlN4SFFVRkhMRVZCUVVVc1UwRkJVeXhGUVVGRkxGZEJRVmNzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZEY2tNc1ZVRkJWU3hYUVVGWE8xbEJRMjVDTEd0RFFVRnJRenRaUVVOc1F5eE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExIbENRVUY1UWl4RFFVRkJPMWxCUTJ4RUxFMUJRVTBzWTBGQll5eEhRVUZITEhWQ1FVRjFRaXhEUVVGQk8xbEJRemxETEUxQlFVMHNZMEZCWXl4SFFVRkhMSFZDUVVGMVFpeERRVUZCTzFsQlJUbERMRTFCUVUwc1YwRkJWeXhIUVVGSExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVN4RFFVRkRMSFZDUVVGMVFqdFpRVU5zUml4TlFVRk5MRk5CUVZNc1IwRkJSeXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRM1JFTEUxQlFVMHNVMEZCVXl4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1dVRkZkRVFzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlR0blFrRkRhRUlzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRVHRoUVVNMVFqdHBRa0ZCVFR0blFrRkRUQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN2IwSkJRM1JDTEZkQlFWY3NSVUZCUlN4WFFVRlhPMjlDUVVONFFpeFRRVUZUTEVWQlFVVXNVMEZCVXp0dlFrRkRjRUlzVTBGQlV5eEZRVUZGTEZOQlFWTTdhVUpCUTNKQ0xFTkJRVU1zUTBGQlFUdG5Ra0ZEUml4TlFVRk5MRTlCUVU4c1IwRkJSenR2UWtGRFdpeEpRVUZKTEVWQlFVVXNUMEZCVHp0dlFrRkRZaXhMUVVGTExFVkJRVVVzVTBGQlV6dHZRa0ZEYUVJc1QwRkJUeXhGUVVGRkxEUkRRVUUwUXp0dlFrRkRja1FzVDBGQlR5eEZRVUZETEhOQ1FVRnpRanRwUWtGRGFrTXNRMEZCUXp0blFrRkRSaXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03WVVGRE5VTTdVVUZEU0N4RFFVRkRMRU5CUTBZc1EwRkJRVHRMUVVOR08wRkJRMGdzUTBGQlF5eERRVUZETEVOQlFVRWlmUT09Il0sInNvdXJjZVJvb3QiOiIifQ==